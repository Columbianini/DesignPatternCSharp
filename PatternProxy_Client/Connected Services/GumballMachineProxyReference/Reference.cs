//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace PatternProxy_Client.GumballMachineProxyReference {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="GumballMachineProxyReference.IGumballMachineTracker")]
    public interface IGumballMachineTracker {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGumballMachineTracker/GetLocation", ReplyAction="http://tempuri.org/IGumballMachineTracker/GetLocationResponse")]
        string GetLocation();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGumballMachineTracker/GetLocation", ReplyAction="http://tempuri.org/IGumballMachineTracker/GetLocationResponse")]
        System.Threading.Tasks.Task<string> GetLocationAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGumballMachineTracker/GetCount", ReplyAction="http://tempuri.org/IGumballMachineTracker/GetCountResponse")]
        int GetCount();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGumballMachineTracker/GetCount", ReplyAction="http://tempuri.org/IGumballMachineTracker/GetCountResponse")]
        System.Threading.Tasks.Task<int> GetCountAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGumballMachineTracker/GetState", ReplyAction="http://tempuri.org/IGumballMachineTracker/GetStateResponse")]
        string GetState();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGumballMachineTracker/GetState", ReplyAction="http://tempuri.org/IGumballMachineTracker/GetStateResponse")]
        System.Threading.Tasks.Task<string> GetStateAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IGumballMachineTrackerChannel : PatternProxy_Client.GumballMachineProxyReference.IGumballMachineTracker, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GumballMachineTrackerClient : System.ServiceModel.ClientBase<PatternProxy_Client.GumballMachineProxyReference.IGumballMachineTracker>, PatternProxy_Client.GumballMachineProxyReference.IGumballMachineTracker {
        
        public GumballMachineTrackerClient() {
        }
        
        public GumballMachineTrackerClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public GumballMachineTrackerClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public GumballMachineTrackerClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public GumballMachineTrackerClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string GetLocation() {
            return base.Channel.GetLocation();
        }
        
        public System.Threading.Tasks.Task<string> GetLocationAsync() {
            return base.Channel.GetLocationAsync();
        }
        
        public int GetCount() {
            return base.Channel.GetCount();
        }
        
        public System.Threading.Tasks.Task<int> GetCountAsync() {
            return base.Channel.GetCountAsync();
        }
        
        public string GetState() {
            return base.Channel.GetState();
        }
        
        public System.Threading.Tasks.Task<string> GetStateAsync() {
            return base.Channel.GetStateAsync();
        }
    }
}
